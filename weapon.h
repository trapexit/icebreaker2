/****************************************************************************************//*                                     WEAPON.H                                         *//****************************************************************************************//*          (c) 1995 by Magnet Interactive Studios, inc. All rights reserved.           *//****************************************************************************************//*  Revision History:                                                                   *//*  v5.6	    5/5/95	 Icebreaker Golden Master version. By Andrew Looney.			       *//****************************************************************************************/#define FIREBALL_EAST         "$boot/IceFiles/FireballArt/fireball_e.anim"#define FIREBALL_WEST         "$boot/IceFiles/FireballArt/fireball_w.anim"#define FIREBALL_NORTH        "$boot/IceFiles/FireballArt/fireball_n.anim"#define FIREBALL_SOUTH        "$boot/IceFiles/FireballArt/fireball_s.anim"#define FIREBALL_NORTHEAST    "$boot/IceFiles/FireballArt/fireball_ne.anim"#define FIREBALL_NORTHWEST    "$boot/IceFiles/FireballArt/fireball_nw.anim"#define FIREBALL_SOUTHEAST    "$boot/IceFiles/FireballArt/fireball_se.anim"#define FIREBALL_SOUTHWEST    "$boot/IceFiles/FireballArt/fireball_sw.anim"#define FIREBALL_DEATH_ANIM   "$boot/IceFiles/FireballArt/fireballsplat.anim"#define MAX_BULLETS    			2#define MAX_BOUNCES    			12#define BULLET_INACTIVE			0#define BULLET_MOVING			1#define BULLET_EXPLODING		2#define BULLET_BOUNCING			3#define BULLET_RETURNING		4/****************************************************************************************/typedef struct bullet{	anim_user		bullet_anim;	int32  			state;	int32				direction;	int32				old_direction;	int32				bounce_counter;	solid_object	*solids_entry;	solid_object	*impact_object;	bullet			*next;};/****************************************************************************************/class weapon {	private:		anim_source 	bullet_source[8];		int32 			step_size;				bullet			bullets[MAX_BULLETS];		bullet			*bounced_bullets;		public:		int32				speed;		anim_source		fireball_death;		bool  LoadArtwork (void);		void  InitializeWeapon (void);		bool  FireWeapon (int32 firing_direction);		bool  DetectHit (bullet *shot);		void  DetermineBounceDirection (int32 x_diff, int32 y_diff, int32 &direction,												  int32 &old_direction);		void  MoveBullets (int32 x_change, int32 y_change);		void  MoveABullet (bullet *shot, int32 x_change, int32 y_change);		void  DrawBullets (void);		void  UndrawBullets (void);		void  StopBullets (void);		void  ShutdownForRestart (void);		void  ShutdownForExit (void);};/***************************************** EOF ******************************************/