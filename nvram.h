/****************************************************************************************//*                                      NVRAM.H                                         *//****************************************************************************************//*          (c) 1995 by Magnet Interactive Studios, inc. All rights reserved.           *//****************************************************************************************//*  Revision History:                                                                   *//*  v5.6	    5/5/95	 Icebreaker Golden Master version. By Andrew Looney.			       *//*  v6.1	   8/21/95	 Began making changes for Icebreaker Two. Renamed levelgrid file.  *//****************************************************************************************/#define MAGNET_3D0_DEVELOPER_ID_NUMBER		1365#define NVRAM_FILE_NAME     					"/NVRAM/icebreaker2[levels]"#define MAX_FILE_DATA_LENGTH  				84#define MAX_FILE_NAME_LENGTH  				32#define MAX_LEVEL_STAT_ELEMENTS				76#define NVRAM_FULL_MESSAGE     				"$boot/IceFiles/MetaArt/NVRAM_full.cel"#define YOU_DID_IT_ALL_MESSAGE     			"$boot/IceFiles/MetaArt/congratulations.cel"#define ARE_YOU_SURE	         				"$boot/IceFiles/MetaArt/are_you_sure.cel"typedef struct status_file_format{	int16 developer_id;	char  level_stats[MAX_LEVEL_STAT_ELEMENTS];	int32	difficulty_and_tracks;};/****************************************************************************************/extern void UpdateDifficultyAndTracks (char file_name[]);extern void FetchDifficultyAndTracks (char file_name[]);extern bool CheckForVictory(char file_name[],int32 level,int32 number_of_levels_to_check);extern void FakeCompletion(int32 first_level, int32 last_level);extern void SetLevelFlagInStatusRecordFile (char file_name[], int32 level, int32 mode);extern void ZeroOutStatusRecordFile (char file_name[]);extern void DumpStatusRecordFile (char file_name[]);extern Err  GetFileBlockSize(Item fileItem, uint32* blockSize);extern Err  CreateDiskFile(char* fileName, uint32 numberOfBytes);extern Err  WriteDiskFile(Item fileItem, ubyte *data, int32 numberOfBytes);extern Err  ReadDiskFile(Item fileItem, ubyte *data, int32 numberOfBytes);extern Err  SetEndOfFile(Item fileItem, int32 endOfFile);/***************************************** EOF ******************************************/